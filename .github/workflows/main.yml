name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - v1.*
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Java para o Maven
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      # 3. Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # 4. Build do projeto Spring Boot com Maven
      - name: Build Spring Boot application
        run: mvn clean package -DskipTests 
        working-directory: ./rest-api # Caminho do projeto Spring Boot no repositório

      # 5. Build da imagem Docker para a aplicação
      - name: Build Docker image
        run: docker build -t vergaGabriel/rest-api:latest -f ./rest-api/Dockerfile ./rest-api
        #working-directory: ./rest-api

      # 6. Deploy usando docker-compose
      - name: Deploy application and PostgreSQL with docker-compose
        run: |
          # Parar e remover containers antigos, se existirem
          docker-compose -f ./rest-api/docker-compose.yaml down || true

          # Subir os serviços definidos no docker-compose
          docker-compose -f ./rest-api/docker-compose.yaml up -d

      # 6.1. Listar docker images
      - name: List Docker images
        run: docker images

      # 6. Instalar Heroku CLI
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # 7. Autenticar no Heroku
      - name: Authenticate with Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "machine api.heroku.com" > ~/.netrc
          echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
          echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
          echo "machine git.heroku.com" >> ~/.netrc
          echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
          echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
          chmod 600 ~/.netrc
          heroku auth:whoami

      # 8. Criar ou usar app existente no Heroku
      - name: Create Heroku App if it doesn't exist
        run: |
          heroku apps:info -a ${{ secrets.HEROKU_APP_NAME }} || heroku create ${{ secrets.HEROKU_APP_NAME }}

      # 9. Configurar Docker no Heroku
      - name: Set Heroku stack to container
        run: heroku stack:set container -a ${{ secrets.HEROKU_APP_NAME }}

      # 10. Fazer o deploy para o Heroku
      - name: Deploy to Heroku
        run: |
          heroku container:login
          heroku container:push web -a ${{ secrets.HEROKU_APP_NAME }}
          heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }}
