name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - v1.*
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Java para o Maven
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      # 3. Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # 4. Build do projeto Spring Boot com Maven
      - name: Build Spring Boot application
        run: mvn clean package -DskipTests 
        working-directory: ./rest-api # Caminho do projeto Spring Boot no repositório

      # 5. Build da imagem Docker para a aplicação
      - name: Build Docker image
        run: docker build -t vergaGabriel/rest-api:latest -f ./rest-api/Dockerfile ./rest-api
        #working-directory: ./rest-api

      # 6. Deploy usando docker-compose
      - name: Deploy application and PostgreSQL with docker-compose
        run: |
          # Parar e remover containers antigos, se existirem
          docker-compose -f ./rest-api/docker-compose.yaml down || true

          # Subir os serviços definidos no docker-compose
          docker-compose -f ./rest-api/docker-compose.yaml up -d

      # 7. Instalando ngrok
      - name: Install ngrok
        run: |
          curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
          | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
          && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
          | sudo tee /etc/apt/sources.list.d/ngrok.list \
          && sudo apt update \
          && sudo apt install -y ngrok
          
      # 8. Autenticando ngrok
      - name: Authenticate ngrok
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          
      # 9. Expondo url a ngrok
      - name: Expose Application with ngrok
        run: |
          ngrok http 8080 > ngrok.log &
          sleep 30  # Aumentando o tempo de espera
          cat ngrok.log  # Exibe os últimos 10 logs do ngrok
          url=$(cat ngrok.log | grep -o 'https://[0-9a-z]*\.ngrok.io')
          echo "ngrok URL: $url"  # Exibe o URL gerado pelo ngrok

      # 10. Esperando ngrok ficar pronto
      - name: Wait for ngrok to be ready
        run: |
          sleep 15
          curl -v http://localhost:4040/status
